// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.23;

import { IERC20Extended } from "../../lib/common/src/interfaces/IERC20Extended.sol";

interface IWM is IERC20Extended {
    /* ============ Events ============ */

    /**
     * @notice Emitted when M tokens are deposited to mint WM shares.
     * @param  caller    Address which deposited the M tokens.
     * @param  receiver  Address which received the WM shares.
     * @param  amount    Amount of M tokens deposited.
     * @param  shares    Amount of WM shares minted.
     * @param  isEarning Whether the depositor is an earner or not.
     */
    event Deposit(address indexed caller, address indexed receiver, uint256 amount, uint256 shares, bool isEarning);

    /**
     * @notice Emitted when WM shares are redeemed for M tokens.
     * @param  caller    Address which redeemed the WM shares.
     * @param  receiver  Address which received the M tokens.
     * @param  shares    Amount of WM shares redeemed.
     * @param  amount    Amount of M tokens received.
     */
    event Redeem(address indexed caller, address indexed receiver, uint256 shares, uint256 amount);

    /* ============ Custom Errors ============ */

    /**
     * @notice Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param  sender  Address whose tokens are being transferred.
     * @param  balance Current balance for the interacting account.
     * @param  needed  Minimum amount required to perform a transfer.
     */
    error InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @notice Emitted when calling `stopEarning` for an account approved as earner by TTG.
     * @param  account Address of the approved account.
     */
    error IsApprovedEarner(address account);

    /**
     * @notice Emitted when calling `startEarning` for an account not approved as earner by TTG.
     * @param  account Address of the unapproved account.
     */
    error NotApprovedEarner(address account);

    /// @notice Emitted if amount to deposit is 0.
    error ZeroDeposit();

    /// @notice Emitted if shares to redeem is 0.
    error ZeroRedeem();

    /// @notice Emitted in constructor if M token is 0x0.
    error ZeroMToken();

    /// @notice Emitted in constructor if TTG Registrar is 0x0.
    error ZeroTTGRegistrar();

    /// @notice Emitted in constructor if YM token is 0x0.
    error ZeroYMToken();

    /* ============ Interactive Functions ============ */

    /**
     * @notice Mints an amount of WM shares by depositing M tokens.
     * @dev    MUST emit the  `Deposit` event.
     *         MUST support ERC-20’s `approve` / `transferFrom` flow.
     * @param  receiver Address which will receive the WM shares.
     * @param  amount   Amount of M tokens to deposit into the wrapper.
     * @return Amount of WM shares minted.
     */
    function deposit(address receiver, uint256 amount) external payable returns (uint256);

    /**
     * @notice Redeems an amount of M tokens by burning WM shares.
     * @dev    MUST emit the `Redeem` event.
     *         MUST support ERC-20’s `approve` / `transferFrom` flow.
     * @param  receiver                Address which will receive the M tokens.
     * @param  shares                  Amount of WM shares to be burned.
     * @return Amount of M tokens redeemed.
     */
    function redeem(address receiver, uint256 shares) external returns (uint256);

    /* ============ View/Pure Functions ============ */

    /**
     * @notice Returns the address of the underlying M token.
     * @return Address of the underlying M token.
     */
    function mToken() external view returns (address);

    /**
     * @notice The total amount of M earned by the WM token.
     * @dev    Is equivalent to the total amount of M held by the WM token
     *         minus the total supply of WM tokens since WM is minted 1:1 with M.
     */
    function totalEarnedM() external view returns (uint256);

    /**
     * @notice Returns the TTG Registrar address.
     * @return Address of the TTG Registrar.
     */
    function ttgRegistrar() external view returns (address);

    /**
     * @notice Returns the address of the Yield M token.
     * @dev    This token allows the holder to claim their share of the yield generated by M in this wrapper.
     * @return Address of the Yield M token.
     */
    function yMToken() external view returns (address);
}
